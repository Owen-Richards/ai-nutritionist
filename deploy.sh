#!/bin/bash

# AI Nutritionist Assistant - One-Click Deployment Script
# Automates the complete setup for demonstrating to potential employers

set -e  # Exit on any error

echo "🥗 AI Nutritionist Assistant - Portfolio Deployment"
echo "=================================================="
echo ""

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
print_status "Checking prerequisites..."

# Check Python
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 is required but not installed."
    exit 1
fi

# Check AWS CLI
if ! command -v aws &> /dev/null; then
    print_error "AWS CLI is required but not installed."
    print_status "Install from: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

# Check SAM CLI
if ! command -v sam &> /dev/null; then
    print_warning "AWS SAM CLI not found. Installing..."
    # Add SAM CLI installation based on OS
    case "$OSTYPE" in
        darwin*)  # macOS
            brew install aws-sam-cli
            ;;
        linux*)   # Linux
            pip install aws-sam-cli
            ;;
        msys*)    # Windows (Git Bash)
            print_error "Please install AWS SAM CLI manually: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/install-sam-cli.html"
            exit 1
            ;;
    esac
fi

print_success "All prerequisites found!"

# Setup Python environment
print_status "Setting up Python virtual environment..."
python3 -m venv .venv

# Activate virtual environment
if [[ "$OSTYPE" == "msys" ]]; then
    source .venv/Scripts/activate
else
    source .venv/bin/activate
fi

print_success "Virtual environment activated"

# Install dependencies
print_status "Installing Python dependencies..."
pip install -r requirements.txt
print_success "Dependencies installed"

# Run tests to ensure everything works
print_status "Running validation tests..."
python -m pytest tests/test_project_validation.py -v
print_success "All tests passed!"

# Check AWS credentials
print_status "Checking AWS credentials..."
if ! aws sts get-caller-identity &> /dev/null; then
    print_error "AWS credentials not configured."
    print_status "Run: aws configure"
    exit 1
fi

AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
AWS_REGION=$(aws configure get region || echo "us-east-1")
print_success "AWS credentials configured for account: $AWS_ACCOUNT_ID in region: $AWS_REGION"

# Build SAM application
print_status "Building SAM application..."
cd infrastructure
sam build
print_success "SAM build completed"

# Deploy with guided setup (first time) or use existing config
if [ ! -f samconfig.toml ]; then
    print_status "First deployment - running guided setup..."
    sam deploy --guided
else
    print_status "Deploying with existing configuration..."
    sam deploy
fi

cd ..
print_success "Deployment completed!"

# Get API Gateway URL
API_URL=$(aws cloudformation describe-stacks --stack-name ai-nutritionist-dev --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' --output text 2>/dev/null || echo "Not deployed")

# Create .env file for local development
print_status "Creating local development environment file..."
cat > .env << EOF
# AI Nutritionist Assistant - Local Development Environment
# Generated by deploy.sh on $(date)

# AWS Configuration
AWS_DEFAULT_REGION=$AWS_REGION
AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID

# API URLs
API_GATEWAY_URL=$API_URL

# DynamoDB Tables (for local development)
USER_DATA_TABLE=ai-nutritionist-users-dev
SUBSCRIPTIONS_TABLE=ai-nutritionist-subscriptions-dev
USAGE_TABLE=ai-nutritionist-usage-dev

# Development Settings
ENVIRONMENT=dev
LOG_LEVEL=DEBUG
PYTHONPATH=./src

# Twilio Configuration (replace with your values)
# TWILIO_ACCOUNT_SID=your_account_sid_here
# TWILIO_AUTH_TOKEN=your_auth_token_here
# TWILIO_PHONE_NUMBER=your_phone_number_here

# Stripe Configuration (replace with your values)
# STRIPE_SECRET_KEY=sk_test_your_test_key_here
# STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here
EOF

print_success "Environment file created: .env"

# Display post-deployment information
echo ""
echo "🎉 Deployment Successful!"
echo "========================"
echo ""
print_success "API Gateway URL: $API_URL"
print_success "Region: $AWS_REGION"
print_success "Account ID: $AWS_ACCOUNT_ID"
echo ""

# Next steps
echo "📋 Next Steps for Portfolio Demo:"
echo "=================================="
echo ""
echo "1. 📱 Set up Twilio WhatsApp:"
echo "   - Go to: https://console.twilio.com/"
echo "   - Get WhatsApp Business API access"
echo "   - Set webhook URL to: $API_URL"
echo ""
echo "2. 💳 Configure Stripe (optional for MVP):"
echo "   - Go to: https://dashboard.stripe.com/"
echo "   - Get API keys and webhook secrets"
echo "   - Update Parameter Store values"
echo ""
echo "3. 🧪 Test the deployment:"
echo "   - Run: python -m pytest tests/ -v"
echo "   - Send test WhatsApp message"
echo "   - Check CloudWatch logs"
echo ""
echo "4. 💼 Portfolio presentation:"
echo "   - Show README_PORTFOLIO.md"
echo "   - Demo live WhatsApp interaction"
echo "   - Highlight cost optimization & SDG impact"
echo "   - Discuss scaling to 1M+ users"
echo ""

# Create a quick test script
cat > test_deployment.py << 'EOF'
#!/usr/bin/env python3
"""Quick deployment test script"""

import requests
import json
import os

def test_api_health():
    """Test API Gateway health"""
    api_url = os.getenv('API_GATEWAY_URL', '')
    if not api_url:
        print("❌ API_GATEWAY_URL not found in environment")
        return False
    
    try:
        # Test with a simple GET (should return 405 Method Not Allowed, which means it's working)
        response = requests.get(api_url, timeout=10)
        print(f"✅ API Gateway responding: {response.status_code}")
        return True
    except Exception as e:
        print(f"❌ API Gateway not responding: {e}")
        return False

def test_lambda_import():
    """Test that Lambda handlers can be imported"""
    import sys
    sys.path.append('./src')
    
    try:
        from handlers.message_handler import lambda_handler
        from services.ai_service import AIService
        from services.subscription_service import get_subscription_service
        print("✅ All modules import successfully")
        return True
    except Exception as e:
        print(f"❌ Import error: {e}")
        return False

if __name__ == '__main__':
    print("🧪 Testing deployment...")
    print("=" * 30)
    
    all_tests_passed = True
    all_tests_passed &= test_lambda_import()
    all_tests_passed &= test_api_health()
    
    if all_tests_passed:
        print("\n🎉 All tests passed! Deployment is ready for demo.")
    else:
        print("\n❌ Some tests failed. Check the logs above.")
EOF

chmod +x test_deployment.py

print_status "Running deployment tests..."
python test_deployment.py

echo ""
print_success "🚀 Your AI Nutritionist Assistant is ready for portfolio demonstrations!"
print_success "📊 Check AWS CloudWatch for metrics and logs"
print_success "💰 Monitor costs in AWS Billing Dashboard"
print_success "🌍 Track SDG impact through usage analytics"
echo ""
echo "Ready to impress at your next interview! 💪"
