/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Begin authentication via magic link / OTP. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        channel: "sms" | "email";
                        /** @description Phone number (E.164) or email address. */
                        identifier: string;
                    };
                };
            };
            responses: {
                /** @description Challenge delivered. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete authentication challenge and issue tokens. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        identifier: string;
                        code: string;
                    };
                };
            };
            responses: {
                /** @description Authentication succeeded. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            accessToken?: string;
                            refreshToken?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve current user profile and entitlements. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Profile payload. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserProfile"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/entitlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return subscription status and token balances. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Entitlement details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Entitlements"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List meal plans for a time window. */
        get: {
            parameters: {
                query?: {
                    weekOf?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Array of meal plans. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MealPlan"][];
                    };
                };
            };
        };
        put?: never;
        /** Create or regenerate a meal plan. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateMealPlanRequest"];
                };
            };
            responses: {
                /** @description Plan generation triggered. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MealPlan"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plans/{planId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update plan metadata or meal swaps. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    planId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMealPlanRequest"];
                };
            };
            responses: {
                /** @description Updated plan. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MealPlan"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/grocery-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve active grocery list derived from meal plans. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Grocery list contents. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GroceryList"];
                    };
                };
            };
        };
        put?: never;
        /** Regenerate grocery list for provided plan ids. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        planIds?: string[];
                    };
                };
            };
            responses: {
                /** @description Regeneration accepted. */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/food": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Record a food entry or barcode scan result. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FoodLogEntry"];
                };
            };
            responses: {
                /** @description Log accepted. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/checkout-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a Stripe checkout session for subscriptions or token packs. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        planId?: string;
                    };
                };
            };
            responses: {
                /** @description Checkout session payload. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/customer-portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate a Stripe customer portal link. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Portal link payload. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserProfile: {
            id: string;
            name?: string | null;
            email?: string | null;
            phone?: string | null;
            dietaryPreferences?: string[];
            allergies?: string[];
            budgetPerWeek?: number | null;
            goals?: components["schemas"]["GoalPreference"][];
        };
        GoalPreference: {
            id: string;
            /** @enum {string} */
            type: "weight_loss" | "weight_gain" | "maintenance" | "performance";
            targetCalories?: number;
            proteinTarget?: number | null;
        };
        Entitlements: {
            subscriptionPlan: string;
            tokensRemaining: number;
            /** Format: date */
            renewalDate?: string;
            features?: string[];
        };
        MealPlan: {
            id: string;
            userId: string;
            /** Format: date */
            weekOf: string;
            days: components["schemas"]["DayPlan"][];
        };
        DayPlan: {
            /** Format: date */
            date: string;
            meals: {
                [key: string]: components["schemas"]["Meal"];
            };
        };
        Meal: {
            id: string;
            name: string;
            /** @enum {string} */
            mealType: "breakfast" | "lunch" | "dinner" | "snack";
            instructions?: string | null;
            ingredients?: string[];
        };
        CreateMealPlanRequest: {
            /** Format: date */
            weekOf: string;
            /** @default false */
            regenerate: boolean;
            preferences?: Record<string, never>;
        };
        UpdateMealPlanRequest: {
            notes?: string;
            swaps?: {
                /** Format: date */
                day?: string;
                /** @enum {string} */
                mealType?: "breakfast" | "lunch" | "dinner" | "snack";
                replacementMealId?: string;
            }[];
        };
        GroceryList: {
            items: {
                name?: string;
                quantity?: string;
                department?: string | null;
            }[];
        };
        FoodLogEntry: {
            /** Format: date-time */
            timestamp: string;
            description: string;
            calories?: number | null;
            protein?: number | null;
            /** @enum {string} */
            source?: "manual" | "barcode" | "photo";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
